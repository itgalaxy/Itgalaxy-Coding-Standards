<?xml version="1.0"?>
<ruleset name="ItgalaxyCodingStandards">
    <description>Itgalaxy coding standard.</description>
    <arg name="tab-width" value="4"/>

    <!-- Todo FOUND NEW LINE GOOD MESSAGE -->

    <!-- PSR2 rules -->

    <rule ref="PSR2.Classes.ClassDeclaration"/>

    <rule ref="PSR2.Classes.PropertyDeclaration"/>

    <!-- Use `OpenBracketSpacingSniff` instead -->
    <!-- Use `CloseBracketSpacingSniff` instead -->
    <!-- <rule ref="PSR2.ControlStructures.ControlStructureSpacing"/> -->

    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>

    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>

    <rule ref="PSR2.Files.ClosingTag"/>

    <rule ref="PSR2.Files.EndFileNewline"/>

    <rule ref="PSR2.Methods.FunctionCallSignature"/>

    <rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>

    <rule ref="PSR2.Methods.MethodDeclaration"/>

    <!-- Use NamespaceDeclarationSniff  -->
    <!-- <rule ref="PSR2.Namespaces.NamespaceDeclaration"/> -->

    <rule ref="PSR2.Namespaces.UseDeclaration"/>

    <!-- PSR1 rules -->

    <rule ref="PSR1.Classes.ClassDeclaration"/>

    <rule ref="PSR1.Files.SideEffects"/>

    <!-- Use `Generic.NamingConventions.CamelCapsFunctionName` instead -->
    <!-- <rule ref="PSR1.Methods.CamelCapsMethodName"/> -->

    <!-- Squiz rules -->

    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

    <!-- <rule ref="Squiz.Arrays.ArrayDeclaration"/> -->

    <!-- <rule ref="Squiz.CSS"/> -->

    <!-- Best sniff is `PSR2.Classes.ClassDeclaration more best` -->
    <!-- <rule ref="Squiz.Classes.ClassDeclaration"/> -->

    <rule ref="Squiz.Classes.ClassFileName"/>

    <!-- <rule ref="Squiz.Classes.DuplicateProperty"/> -->

    <!-- Best sniff is `Generic.PHP.LowerCaseKeyword` -->
    <!-- <rule ref="Squiz.Classes.LowercaseClassKeywords"/> -->

    <rule ref="Squiz.Classes.SelfMemberReference"/>

    <rule ref="Squiz.Classes.ValidClassName"/>

    <!-- <rule ref="Squiz.Commenting.BlockComment"> -->

    <!-- <rule ref="Squiz.Commenting.ClassComment"> -->

    <!-- <rule ref="Squiz.Commenting.ClosingDeclarationComment"/> -->

    <!-- <rule ref="Squiz.Commenting.DocCommentAlignment"/> -->

    <!-- <rule ref="Squiz.Commenting.EmptyCatchComment"/> -->

    <!-- <rule ref="Squiz.Commenting.FileComment"/> -->

    <!-- <rule ref="Squiz.Commenting.FunctionComment"> -->

    <!-- <rule ref="Squiz.Commenting.FunctionCommentThrowTag"/> -->

    <!-- <rule ref="Squiz.Commenting.InlineComment"> -->

    <!-- <rule ref="Squiz.Commenting.LongConditionClosingComment"/> -->

    <!-- <rule ref="Squiz.Commenting.PostStatementComment"/> -->

    <!-- <rule ref="Squiz.Commenting.VariableComment"> -->

    <!-- Use `ItgalaxyCodingStandards.ControlSignatures.ControlSignature` instead -->
    <!-- <rule ref="Squiz.ControlStructures.ControlSignature"/> -->

    <!-- <rule ref="Squiz.ControlStructures.ElseIfDeclaration"/> -->

    <!-- Todo need disable, after add rule `AsKeywordSpacing` -->
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>

    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>

    <rule ref="Squiz.ControlStructures.InlineIfDeclaration">
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.NotSingleLine"/>
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.NoBrackets"/>
    </rule>

    <!-- Best sniff is `Generic.PHP.LowerCaseKeyword` -->
    <!-- <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/> -->

    <!-- Best sniff is `PSR2.ControlSignatures.SwitchDeclaration` -->
    <!-- <rule ref="Squiz.ControlStructures.SwitchDeclaration"/> -->

    <!-- <rule ref="Squiz.Debug.JSLint"/> -->

    <!-- <rule ref="Squiz.Debug.JavaScriptLint"/> -->

    <!-- <rule ref="Squiz.Files.FileExtension"/> -->

    <!-- <rule ref="Squiz.Formatting.OperatorBracket"/> -->

    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>

    <rule ref="Squiz.Functions.FunctionDeclaration"/>

    <rule ref="Squiz.Functions.FunctionDuplicateArgument"/>

    <!-- <rule ref="Squiz.Functions.GlobalFunction"/> -->

    <!-- Best sniff is `Generic.PHP.LowerCaseKeyword` -->
    <!-- <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/> -->

    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>

    <rule ref="Squiz.NamingConventions.ValidFunctionName">
        <exclude name="Squiz.NamingConventions.ValidFunctionName.PrivateNoUnderscore"/>
    </rule>

    <rule ref="Squiz.NamingConventions.ValidVariableName">
        <exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore"/>
    </rule>

    <!-- <rule ref="Squiz.Objects.DisallowObjectStringIndex"/> -->

    <!-- <rule ref="Squiz.Objects.ObjectInstantiation"/> -->

    <!-- <rule ref="Squiz.Objects.ObjectMemberComma"/> -->

    <!--<rule ref="Squiz.Operators.ComparisonOperatorUsage"/> -->

    <rule ref="Squiz.Operators.IncrementDecrementUsage"/>

    <rule ref="Squiz.Operators.ValidLogicalOperators"/>

    <!-- <rule ref="Squiz.PHP.CommentedOutCode"/> -->

    <!-- <rule ref="Squiz.PHP.DisallowBooleanStatement"/> -->

    <!-- <rule ref="Squiz.PHP.DisallowComparisonAssignment"/> -->

    <!-- <rule ref="Squiz.PHP.DisallowInlineIf"/> -->

    <!-- <rule ref="Squiz.PHP.DisallowMultipleAssignments"/> -->

    <!-- <rule ref="Squiz.PHP.DisallowObEndFlush"/> -->

    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>

    <!-- Use `ItgalaxyCodingStandards.PHP.ForbiddenFunctionsSniff` instead -->
    <!-- <rule ref="Squiz.PHP.DiscouragedFunctions"/> -->

    <!-- <rule ref="Squiz.PHP.EmbeddedPhp"/> -->

    <!-- <rule ref="Squiz.PHP.Eval"/> -->

    <!-- Use `ItgalaxyCodingStandards.PHP.ForbiddenFunctionsSniff` instead -->
    <!-- <rule ref="Squiz.PHP.ForbiddenFunctions"/> -->

    <!-- <rule ref="Squiz.PHP.GlobalKeyword"/> -->

    <rule ref="Squiz.PHP.Heredoc"/>

    <rule ref="Squiz.PHP.InnerFunctions"/>

    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>

    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!-- <rule ref="Squiz.Scope.MemberVarScope"/> -->

    <rule ref="Squiz.Scope.MethodScope"/>

    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Todo need enable in next release -->
    <!-- <rule ref="Squiz.Strings.DoubleQuoteUsage"/> -->

    <rule ref="Squiz.Strings.EchoedStrings"/>

    <rule ref="Squiz.WhiteSpace.CastSpacing"/>

    <!-- See comment below -->
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>

    <!--
        When 3.0 is released, change this to:
        <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen" />
        <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose" />
    -->
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpenBrace">
        <severity>0</severity>
    </rule>

    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpaceBeforeCloseBrace">
        <severity>0</severity>
    </rule>

    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.LineAfterClose">
        <severity>0</severity>
    </rule>

    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.NoLineAfterClose">
        <severity>0</severity>
    </rule>

    <!-- <rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace"/> -->

    <!-- <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/> -->

    <!-- Todo need support afterLast option -->
    <!-- <rule ref="Squiz.WhiteSpace.FunctionSpacing"/> -->

    <!-- Todo Newline not working -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

    <!-- <rule ref="Squiz.WhiteSpace.MemberVarSpacing"/> -->

    <!-- Use `ItgalaxyCodingStandards.WhiteSpace.ObjectOperatorSpacingSniff` instead -->
    <!-- <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing"/> -->

    <!-- Use `ItgalaxyCodingStandards.WhiteSpace.OperatorSpacing` instead -->
    <!-- <rule ref="Squiz.WhiteSpace.OperatorSpacing"/> -->

    <!-- <rule ref="Squiz.WhiteSpace.PropertyLabelSpacing"/> -->

    <!-- <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/> -->

    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

    <!-- Zend rules -->

    <!-- <rule ref="Zend.Debug.CodeAnalyzer"/> -->

    <!-- <rule ref="Zend.Files.ClosingTag"/> -->

    <!-- <rule ref="Zend.NamingConventions.ValidVariableName"/> -->

    <!-- PEAR rules -->

    <!-- <rule ref="PEAR.Classes.ClassDeclaration"/> -->

    <!-- <rule ref="PEAR.Commenting.ClassComment"/> -->

    <!-- <rule ref="PEAR.Commenting.FileComment"/> -->

    <!-- <rule ref="PEAR.Commenting.FunctionComment"/> -->

    <!-- <rule ref="PEAR.Commenting.InlineComment"/> -->

    <!-- <rule ref="PEAR.ControlStructures.ControlSignature"/> -->

    <!-- <rule ref="PEAR.ControlStructures.MultiLineCondition"/> -->

    <rule ref="PEAR.Files.IncludingFile"/>

    <!-- <rule ref="PEAR.Formatting.MultiLineAssignment"/> -->

    <!-- <rule ref="PEAR.Functions.FunctionCallSignature"/> -->

    <!-- <rule ref="PEAR.Functions.FunctionDeclaration"/> -->

    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!-- <rule ref="PEAR.NamingConventions.ValidClassName"/> -->

    <!-- <rule ref="PEAR.NamingConventions.ValidFunctionName"/> -->

    <!-- <rule ref="PEAR.NamingConventions.ValidVariableName"/> -->

    <!-- <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent"/> -->

    <!-- <rule ref="PEAR.WhiteSpace.ScopeClosingBrace"/> -->

    <!-- <rule ref="PEAR.WhiteSpace.ScopeIndent"/> -->

    <!-- Generic rules -->

    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- <rule ref="Generic.Arrays.DisallowShortArraySyntax"/> -->

    <rule ref="Generic.Classes.DuplicateClassName"/>

    <!-- <rule ref="Generic.Classes.OpeningBraceSameLine"/> -->

    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>

    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>

    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>

    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>

    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>

    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

    <!-- Use `ItgalaxyCodingStandards.CodeAnalysis.UnusedFunctionParameters` instead -->
    <!-- <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/> -->

    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

    <!-- <rule ref="Generic.Commenting.DocComment"> -->

    <rule ref="Generic.Commenting.Fixme"/>

    <rule ref="Generic.Commenting.Todo"/>

    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- <rule ref="Generic.Debug.CSSLint"/> -->

    <!-- <rule ref="Generic.Debug.ClosureLinter"/> -->

    <!-- <rule ref="Generic.Debug.JSHint"/> -->

    <rule ref="Generic.Files.ByteOrderMark"/>

    <rule ref="Generic.Files.EndFileNewline"/>

    <!-- <rule ref="Generic.Files.EndFileNoNewline"/> -->

    <!-- <rule ref="Generic.Files.InlineHTML"/> -->

    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>

    <!-- <rule ref="Generic.Files.LowercasedFilename"/> -->

    <rule ref="Generic.Files.OneClassPerFile"/>

    <rule ref="Generic.Files.OneInterfacePerFile"/>

    <rule ref="Generic.Files.OneTraitPerFile"/>

    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- <rule ref="Generic.Formatting.MultipleStatementAlignment"/> -->

    <!-- <rule ref="Generic.Formatting.NoSpaceAfterCast"/> -->

    <rule ref="Generic.Formatting.SpaceAfterCast"/>

    <!-- <rule ref="Generic.Formatting.SpaceAfterNotSniff"/> -->

    <rule ref="Generic.Functions.CallTimePassByReference"/>

    <!-- Use `ItgalaxyCodingStandards.WhiteSpace.Comma` instead -->
    <!-- <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/> -->

    <!-- Use `Squiz.Functions.MultiLineFunctionDeclaration instead -->
    <!-- <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/> -->
    <!-- <rule ref="Generic.Functions.OpeningFunctionBraceKernighan"/> -->

    <!-- <rule ref="Generic.Metrics.CyclomaticComplexity"/> -->

    <!-- <rule ref="Generic.Metrics.NestingLevel" /> -->

    <rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>

    <rule ref="Generic.NamingConventions.ConstructorName"/>

    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <rule ref="Generic.PHP.BacktickOperator"/>

    <!-- <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/> -->

    <!-- No need everywhere closing php tag -->
    <!-- <rule ref="Generic.PHP.ClosingPHPTag"/> -->

    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <rule ref="Generic.PHP.DisallowAlternativePHPTags"/>

    <rule ref="Generic.PHP.DisallowShortOpenTag"/>

    <!-- <rule ref="Generic.PHP.ForbiddenFunctionsSniff"/> -->

    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <rule ref="Generic.PHP.LowerCaseKeyword"/>

    <rule ref="Generic.PHP.NoSilencedErrors"/>

    <rule ref="Generic.PHP.SAPIUsage"/>

    <rule ref="Generic.PHP.Syntax"/>

    <!-- <rule ref="Generic.PHP.UpperCaseConstant"/> -->

    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>

    <!-- <rule ref="Generic.VersionControl.SubversionProperties"/> -->

    <!-- <rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/> -->

    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <rule ref="Internal.NoCodeFound">
        <severity>0</severity>
    </rule>
</ruleset>
